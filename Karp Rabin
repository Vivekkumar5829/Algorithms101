Karp Rabin:--

-Hash value is used to efficiently check for potential matches between a pattern and substrings of a larger text. The hash value is calculated using a rolling hash function, which allows you to update the hash value for a new substring by efficiently removing the contribution of the old character and adding the contribution of the new character. This makes it possible to slide the pattern over the text and calculate the hash value for each substring without recalculating the entire hash from scratch.

-Steps to Calculate hash value:--
                          Step 1: Choose a suitable base and a modulus.
                          Step 2: Initialize the hash value.
                          Step 3: Calculate the initial hash value for the pattern.
                          Step 4: Slide the pattern over the text.
                          Step 5: Update the hash value for each subsequent substring.
                          Step 6: Compare hash values.

Time Complexity:--
    The average and best-case :-- O(n+m),
    Worst-case :-- O(nm).

Code:--

public class KarpRabin {
    private static final int PRIME = 101;

    private static double calculateHash(String str) {
        double hash = 0;
        for(int i=0; i < str.length(); i++) {
            hash += str.charAt(i) * Math.pow(PRIME, i);
        }
        return hash;
    }

    private static double updateHash(double prevHash, char oldChar, char newChar, int patternLength) {
        double newHash = (prevHash - oldChar) / PRIME;
        newHash = newHash + newChar * Math.pow(PRIME, patternLength - 1);
        return newHash;
    }

    public static void search(String text, String pattern) {
        int patternLength = pattern.length();
        double patternHash = calculateHash(pattern);
        double textHash = calculateHash(text.substring(0, patternLength));

        for(int i=0; i<= text.length() - patternLength; i++) {
            if(textHash == patternHash) {
                if(text.substring(i, i+patternLength).equals(pattern)) {
                    System.out.println("Pattern found at index " + i);
                }
            }

            if (i < text.length() - patternLength) {
                textHash = updateHash(textHash, text.charAt(i), text.charAt(i + patternLength), patternLength);
            }
        }
    }
    public static void main(String[] args) {
        String text = "MissTheChatOf";
        String patt = "Chat";
        search(text, patt);
    }
}
